package com.invitation.card.config;import com.alibaba.druid.pool.DruidDataSource;import com.alibaba.druid.support.http.StatViewServlet;import com.alibaba.druid.support.http.WebStatFilter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.boot.web.servlet.FilterRegistrationBean;import org.springframework.boot.web.servlet.ServletRegistrationBean;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import java.sql.SQLException;/** * @ Author     ：haoWen * @ Date       ：Created in 17:00 2018/8/31 * @ Description： 配置Druid相关的Servlet和Filter */@Configuration@EnableConfigurationProperties({DruidDataSourceProperties.class})public class DruidConfig {    private final DruidDataSourceProperties properties;    @Autowired    public DruidConfig(DruidDataSourceProperties properties) {        this.properties = properties;    }    @Bean(name ="dataSource")    @ConditionalOnMissingBean    public DruidDataSource druidDataSource() {        DruidDataSource druidDataSource = new DruidDataSource();        druidDataSource.setDriverClassName(properties.getDriverClassName());        druidDataSource.setUrl(properties.getUrl());        druidDataSource.setUsername(properties.getUsername());        druidDataSource.setPassword(properties.getPassword());        druidDataSource.setInitialSize(properties.getInitialSize());        druidDataSource.setMinIdle(properties.getMinIdle());        druidDataSource.setMaxActive(properties.getMaxActive());        druidDataSource.setMaxWait(properties.getMaxWait());        druidDataSource.setTimeBetweenEvictionRunsMillis(properties.getTimeBetweenEvictionRunsMillis());        druidDataSource.setMinEvictableIdleTimeMillis(properties.getMinEvictableIdleTimeMillis());        druidDataSource.setValidationQuery(properties.getValidationQuery());        druidDataSource.setTestWhileIdle(properties.isTestWhileIdle());        druidDataSource.setTestOnBorrow(properties.isTestOnBorrow());        druidDataSource.setTestOnReturn(properties.isTestOnReturn());        druidDataSource.setPoolPreparedStatements(properties.isPoolPreparedStatements());        druidDataSource.setMaxPoolPreparedStatementPerConnectionSize(properties.getMaxPoolPreparedStatementPerConnectionSize());        try {            druidDataSource.setFilters(properties.getFilters());            druidDataSource.init();        } catch (SQLException e) {            e.printStackTrace();        }        return druidDataSource;    }    /**     * 注册Servlet信息， 配置监控视图     *     * @return servletRegistrationBean     */    @Bean    @ConditionalOnMissingBean    public ServletRegistrationBean<StatViewServlet> druidServlet() {        ServletRegistrationBean<StatViewServlet> servletRegistrationBean = new ServletRegistrationBean<>(new StatViewServlet(), "/druid/*");        //白名单：        //servletRegistrationBean.addInitParameter("allow","192.168.6.195");        //IP黑名单 (存在共同时，deny优先于allow) : 如果满足deny的话提示:Sorry, you are not permitted to view this page.        //servletRegistrationBean.addInitParameter("deny","192.168.6.73");        //登录查看信息的账号密码, 用于登录Druid监控后台        servletRegistrationBean.addInitParameter("loginUsername", "admin");        servletRegistrationBean.addInitParameter("loginPassword", "admin");        //是否能够重置数据.        servletRegistrationBean.addInitParameter("resetEnable", "true");        return servletRegistrationBean;    }    /**     * 注册Filter信息, 监控拦截器     *     * @return FilterRegistrationBean     */    @Bean    @ConditionalOnMissingBean    public FilterRegistrationBean<WebStatFilter> filterRegistrationBean() {        FilterRegistrationBean<WebStatFilter> filterRegistrationBean = new FilterRegistrationBean<>();        filterRegistrationBean.setFilter(new WebStatFilter());        filterRegistrationBean.addUrlPatterns("/*");        filterRegistrationBean.addInitParameter("exclusions", "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*");        return filterRegistrationBean;    }}